#!/bin/bash
# better-initramfs project
# https://bitbucket.org/piotrkarbowski/better-initramfs
# Copyright (c) 2010-2018, Piotr Karbowski <piotr.karbowski@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
#    * Redistributions of source code must retain the above copyright notice,
#      this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright notice,
#      this list of conditions and the following disclaimer in the documentation
#      and/or other materials provided with the distribution.
#    * Neither the name of the Piotr Karbowski nor the names of its contributors
#      may be used to endorse or promote products derived from this software
#      without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE

workdir="$(readlink -f "$0")"
workdir="${workdir%/*}"
build_dir="${workdir}/build_dir"
distfiles="${workdir}/distfiles"
cores_num="$(grep -c '^processor' /proc/cpuinfo)"

einfo() { echo -e "\033[1;32m>>> \033[0m$@"; }
eerror() { echo -e "\033[1;31m>>> \033[0m$@" >&2; }
die() { eerror "$@"; exit 1; }
run() { "$@" || die "Command '$@' failed."; }

fetch_source () {
    if ! [ -d "${distfiles}" ]; then mkdir "${distfiles}"; fi
    for source in "${sources[@]}" "$@"; do
        if ! [ -f "${distfiles}/${source##*/}" ]; then
            case "${source}" in
                http://*|https://*|ftp://*)
                    einfo "Fetching ${source##*/} ..."
                    if [ -f "${distfiles}/${source##*/}.tmp" ]; then
                        rm -f "${distfiles}/${source##*/}.tmp"
                    fi
                    run wget "${source}" -O "${distfiles}/${source##*/}.tmp" && \
                    mv "${distfiles}/${source##*/}.tmp" "${distfiles}/${source##*/}"
                    if ! [ -s "${distfiles}/${source##*/}" ]; then
                        rm -f "${distfiles}/${source##*/}"
                        die "Unable to fetch ${source##*/}."
                    fi
                    
                ;;
                *)
                    die "You have to provide '${source##*/}'."
                ;;
            esac
        fi
    done; unset source
}

install_source() {
    if ! [ -d "${build_dir}/source" ]; then
        mkdir "${build_dir}/source"
    fi
    for source in "${sources[@]}"; do
        if ! [ -f "${distfiles}/${source##*/}" ]; then
            die "Missing source."
        else
            case "${source##*/}" in
                *.tar|*.tar.bz2|*.tar.xz|*.tar.gz|l*.tar.lzma|*.tgz|*.txz|*.tbz2)
                    einfo "Extracting '${source##*/}' ..."
                    if [ -d "${build_dir}/source/${name}-${version}" ]; then
                        einfo "Cleaning old source dir ..."
                        rm -rf "${build_dir}/source/${name}-${version}"
                    fi
                    mkdir -p "${build_dir}/source/${name}-${version}"
                    run tar xf  "${distfiles}/${source##*/}" --strip-components 1 -C "${build_dir}/source/${name}-${version}"
                ;;
                *)
                    mkdir -p "${build_dir}/source/${name}-${version}"
                    cp "${distfiles}/${source##*/}" "${build_dir}/source/${name}-${version}"
                ;;
            esac
            if [ -d "${workdir}/patches/${name}" ]; then
                for patch in "${workdir}/patches/${name}"/*; do
                    einfo "Applying ${patch##*/} ..."
                    run patch -d "${build_dir}/source/${name}-${version}/" -p1 -i "${patch}" --silent
                done
            fi
        fi
    done; unset source
}

build_bwrap() {
    if env -i \
        PATH="/binit/prefix/bin:/binit/prefix/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \
        HOME="/root" \
        TERM="${TERM}" \
        CFLAGS="-Os -pipe -fomit-frame-pointer" \
        CXXFLAGS="-Os -pipe -fomit-frame-pointer" \
        CPPFLAGS='-I/binit/prefix/include' \
        LDFLAGS="${LDFLAGS}" \
        PKG_CONFIG_PATH='/binit/prefix/lib/pkgconfig/' \
        bwrap --bind "${build_dir}" / --dev /dev --proc /proc /bin/sh -c "umask 022 && ${build_cmd:-false}"
    then
        einfo "Finished: $name-$version"
    else
        die "Failed: $name-$version"
    fi
}

build_chroot() {
    if env -i \
        PATH="/binit/prefix/bin:/binit/prefix/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \
        HOME="/root" \
        TERM="${TERM}" \
        CFLAGS="-Os -pipe -fomit-frame-pointer" \
        CXXFLAGS="-Os -pipe -fomit-frame-pointer" \
        CPPFLAGS='-I/binit/prefix/include' \
        LDFLAGS="${LDFLAGS}" \
        PKG_CONFIG_PATH='/binit/prefix/lib/pkgconfig/' \
        chroot "${build_dir}" /bin/sh -c "umask 022 && ${build_cmd:-false}"
    then
        einfo "Finished: $name-$version"
    else
        die "Failed: $name-$version"
    fi
}

build_source() {
    LDFLAGS="-L/binit/prefix/lib"
    if [ "${STATIC}" = '1' ]; then
        LDFLAGS="${LDFLAGS} -static"
    fi

    if command -v bwrap; then
        build_bwrap $@
    else
        build_chroot $@
    fi
}

print_help() {
cat << EOF
${0##*/} v0.1.1 - Simple build system using Alpine Linux sysroot.
    
Usage:
    $0 init <arch> - prepare build_root with specified arch. x86 and x86_64 is supported.
    $0 build <name> - build <name> package.

Example workflow, preparing dropbear.
    $0 init x86
    $0 build zlib dropbear
EOF
}

case "$1" in
    init)
        case "$2" in
            i586|i686|x86)
                arch='x86'
		        sysroot_url="https://bitbucket.org/piotrkarbowski/better-initramfs/downloads/alpine-3.14.2-${arch}-sysroot-r1.tar.xz"
            ;;
            x86_64)
                arch='x86_64'
		        sysroot_url="https://bitbucket.org/piotrkarbowski/better-initramfs/downloads/alpine-3.14.2-${arch}-sysroot-r1.tar.xz"
            ;;
            aarch64)
                arch='aarch64'
                sysroot_url="https://github.com/edvintas/alpine-minirootfs/releases/download/0.0.5/rootfs.tar.gz"
            ;;
            *)
                die "init need arch argument, x86 or x86_64!"
            ;;
        esac
        einfo "Preparing '${build_dir}' ..."
        rootfs_tarball="${distfiles}/${sysroot_url##*/}"
        fetch_source "${sysroot_url}"
        if [ -d "${build_dir}" ]; then
            einfo "Build dir exist, cleaning ..."
            rm -rf "${build_dir}"
        fi
        mkdir "${build_dir}"
        einfo "Unpacking '${rootfs_tarball##*/}' ..."
        tar xf "${rootfs_tarball}" --exclude 'dev/*' -C "${build_dir}/" --strip-components 1
        cat /etc/resolv.conf > "${build_dir}/etc/resolv.conf"
        echo "${arch}" > "${build_dir}/arch"
        if command -v bwrap; then
            rmdir "${build_dir}/proc"
        else
            mount /proc $build_dir/proc -o bind
            mount /dev $build_dir/dev -o bind
        fi
    ;;
    build)
        shift
        if [ -z "${1}" ]; then
            die "What do you want to build?"
        fi
        arguments="$#"
        building_num='1'
        if ! [ -d "${build_dir}" ]; then die "No build_dir, forgot to ${0} init <arch>?"; fi
        while [ -n "$1" ]; do
            if [ -f "${workdir}/lebuilds/$1.lebuild" ]; then
                einfo "Building $1 (${building_num} of $arguments) ..."
                (
                    unset name version sources build_cmd deploy
                    . "${workdir}/lebuilds/$1.lebuild"
                    if [ -n "${deploy}" ] && [ -f "${build_dir}/${deploy}" ]; then
                        if ! [ -d "${workdir}/output" ]; then mkdir "${workdir}/output"; fi
                        install --mode=0755  "${build_dir}/${deploy}" "${workdir}/output/"
                        strip -s "${workdir}/output/${deploy##*/}"
                    fi
                ) || die "Build failed: '$1'."
            else
                die "Wrong lebuild name."
            fi
        shift
        building_num=$((building_num+1))
        done
        if [ "$#" = '0' ]; then
            einfo "Everyting done."
        fi
    ;;
    *)
        print_help; exit 1
    ;;
esac
